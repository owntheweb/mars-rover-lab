//RoverLab streams photos and other sensor data from its Raspberry Pi components to a satellite server where that content can be streamed to the world.

//Special thanks to Arvind Ravulavaru with camera streaming functionality referenced from his work at:
//http://thejackalofjavascript.com/rpi-live-streaming/

var io = require('socket.io/node_modules/socket.io-client');
var ss = require('socket.io-stream');
var fs = require('fs');

//Raspberry Pi camera functionality
var cam = require('picam');
var beacon = require('roverbeacon');

var RoverLab = function() {
	//settings

	//Satellite server can support multiple rovers.* 
	//Make sure this is unique if running multiple rovers.
	this.roverName = '';

	//satellite server location: where the rover sends images/data to (shared with the world from there)
	this.satHost = '';
	this.satPort = 0;

	//The satellite server will only accept data from rovers with the matching password
	//!!! This is just a start in security, look into making security much stronger
	this.roverPassword = ''; 

	//Run rover as a socket.io client that connects to the satellite socket.io server
	this.client;

	

	this.active = false;
	this.sendingImage = false;
	this.socketNamespace = '/rover';

};

//to call when picam image is updated
RoverLab.prototype.onImageUpdate = function(imgLoc) {
	var self = this;

	console.log('event: cam image updated: ' + imgLoc);

	//socket stream for sending files (all from camera for now)
	var stream = ss.createStream();
	
	//allow another image to transmitted after current transmition is complete
	stream.on('finish', function() {
		console.log('finished uploading rover image');
		self.sendingImage = false;
	});

	stream.on('error', function(error) {
		console.log('onImageUpdate stream error:' + error);
		self.sendingImage = false;
	});

	stream.on('end', function() {
		console.log('rover image transfer ended');
		self.sendingImage = false;
	});

	//only transmit if the last image has finished transmitting
	//why: prevent too many images being sent at once: bandwidth clog?
	//!!! This may cause some delays with a single stream/slow internet. Discuss options.
	if(self.sendingImage == false) {
		self.sendingImage = true;

		//transmit image
		ss(self.client).emit('roverimage', stream, {name: imgLoc});
		fs.createReadStream(imgLoc).pipe(stream);
		
	}
};

//roverbeacon module has triangulated position of rover based on iBeacons surrounding the room
RoverLab.prototype.onBeaconPosition = function(position) {
	var self = this;

	//!!! do something
	console.log(position);
};

//roverbeacon module has calculated distance from a point of interest
RoverLab.prototype.onBeaconPoiProximity = function(data) {
	var self = this;

	//!!! do something
	console.log(data);
};

//start streaming cam images and other data to the "satellite" server (sharing with the world from there)
//!!! currently related 
RoverLab.prototype.startStreaming = function(io) {
 	var self = this;

	//camera
	cam.start();
	cam.on('imageupdate', self.onImageUpdate.bind(self));

	//beacons
	beacon.start();
	beacon.on('position', self.onBeaconPosition.bind(self));
	beacon.on('poiProximity', self.onBeaconPoiProximity.bind(self));
};
 
//stop streaming camera and sensors
RoverLab.prototype.stopStreaming = function() {
	var self = this;

	//camera
	cam.stop();
	self.sendingImage = false;
	cam.removeListener('imageupdate', self.onImageUpdate);

	//beacons
	beacon.stop();
	beacon.removeListener('position', self.onBeaconPosition);
	beacon.removeListener('poiProximity', self.onBeaconPoiProximity);
};

RoverLab.prototype.init = function() {
	var self = this;

	self.client = io.connect(this.satHost + ':' + this.satPort + this.socketNamespace);

	self.client.on('connect', function() {

		//prevent sensors and such from doing double work if connection is lost and re-established
		if(self.active == false) {
			self.active = true;

			console.log('connected to satellite, logging in...');
		
			//after logging in:
			self.client.on('roverloginconfirmed', function() {
				//get the show started!
				console.log('successfully logged in, starting up services');

				self.startStreaming();
				
			});

			self.client.on('roverloginfail', function() {
				//oh uh, after further edits, not sure if this will ever get shown any more, will it?
				console.log('satellite server says: access denied: check RoverLab settings and restart');
			});
			
			//login
			var login = {
				roverID: self.roverName,
				roverPassword: self.roverPassword
			};
			this.emit('roverlogin', login);
			
		} else {
			//!!! actually, login may have been lost, need to start over and work to keep things moving?
			//After further edits, not sure if this will ever get shown any more, will it?
			console.log('Connect to server detected, but RoverLab is already active and connected? Ignoring and moving on...');
		}
	}); 

	self.client.on('disconnect', function() {
		console.log('disconnected, stop streaming...');
		if(self.active == true) {
			self.stopStreaming();

			self.active = false;
		}
	});

	self.client.on('error', function(error) {
		//let's see
		console.log('client error: ' + error);
	});

	//handle errors if/when sat server dies while transfering picam files
	ss(self.client).on('error', function(error) {
		console.log('ss client error:' + error);
		self.sendingImage = false;
	});

};

module.exports = new RoverLab();
