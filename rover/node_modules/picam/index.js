//PiCamStream utilizes the Raspberry Pi's raspistill program, monitoring the image it creates for changes and reporting those change events.

//Special thanks to Arvind Ravulavaru with camera functionality referenced from his work at:
//http://thejackalofjavascript.com/rpi-live-streaming/

//!!! TO DISCUSS:
//Should require() happen outside in global scope or inside object?
//In this case, both were used. Is this ok or just outside in module's global for the future?
var events = require('events');

var PiCam = function() {
	//where the raspistill image is saved
	//ensure folder exists first
	//consider using full path to file, helpful if shell script starts node (I think)
	this.imgFile = '/home/pi/mars-rover-lab/rover/PiCam/PiCam.jpg'; //!!! need to create directory if it doesn't exist?

	//capture settings
	//!!! expand on this: raspistill has a lot of options that can be utilized!
	this.imgWidth = 640;
	this.imgHeight = 480;
	this.captureInterval = 1000; //in milliseconds
	this.checkFileInterval = 500; //events called when cam image file changes

	this.fs = require('fs');
	this.path = require('path');

	this.spawn = require('child_process').spawn;
	this.proc;

	this.active = false;
};

//inherit all the properties from EventEmitter so that this object can emit its own events to start
PiCam.prototype = new events.EventEmitter;
 
//stop streaming camera and sensors
PiCam.prototype.stop = function() {
	var self = this;

	self.active = false;
	
	if(self.proc) {
		self.proc.kill();
	}
	
	//!!! need absolute path if running from cron, boot or other system launch
	self.fs.unwatchFile(self.imgFile);
};
 
PiCam.prototype.start = function(io) {
 	var args, self = this;
	
 	//!!! currently set for upside down camera... create options for different orientations
	args = ["-vf", "-hf", "-w", this.imgWidth, "-h", this.imgHeight, "-o", self.imgFile, "-t", "999999999", "-tl", this.captureInterval];
	self.proc = self.spawn('raspistill', args);
 
	console.log('Watching PiCam image for changes...');
 
	self.active = true;
 
	self.fs.watchFile(self.imgFile, { persistent: true, interval: self.checkFileInterval }, function(current, previous) {
		
		//!!! stream image data to server: notify RoverLab/parent to do that once file is updated
		self.emit('imageupdate', self.imgFile);
	});
 
};

module.exports = new PiCam();
